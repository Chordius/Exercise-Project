const express = require('express')
const mongoose = require('mongoose');
const dinoUser = require('./models/dinosaurs.data.js');
const app = express()

app.use(express.json())
app.use(express.urlencoded({extended: false}))

var openingLine = "Welcome to DinoForums! A forum for fossil enthusiasts (not dinos)"
var currentUser = currentUser || 0

app.get('/', (req, res) => {
    res.send(openingLine);
});

// user-based commands
app.post('/createAccount', async (req, res) => {
    try {
        const makeDinosaur = await dinoUser.create(req.query);
        res.status(200).json(makeDinosaur)
    } catch (error) {
        res.status(500).json({message: error.message})
    }
});

app.get('/database/12345/allProfile', async (req, res) => {
    try {
        var search = await dinoUser.find({})
        res.status(500).json(search)
    } catch (error) {
        res.status(500).json({message: error.message})
    }
});

app.get('/loginProfile', async (req, res) => {
    try {
        var nameX = req.query.name
        var passX = req.query.password
        var search = await dinoUser.find({name: nameX, password: passX})
        if (search.length > 0) {
            res.send("User found! Logged in!")
        } else {
            res.status(500).json({message: 'username/password may be incorrect.'})
        }
    } catch (error) {
        res.status(500).json({message: error.message})
    }
});

app.get('/accountProfile/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const profileDinosaur = await dinoUser.findById(id);
        res.status(200).json(profileDinosaur)
    } catch (error) {
        res.status(500).json({message: error.message})
    }
});

app.put('/accountProfile/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const profileDinosaur = await dinoUser.findByIdAndUpdate(id, req.body);
        if (!profileDinosaur) {
            return res.status(404).json({message: "User not found"})
        }
        const profileDinosaurUpdate = await dinoUser.findById(id);
        res.status(200).json(profileDinosaurUpdate)
    } catch (error) {
        res.status(500).json({message: error.message})
    }
});

app.delete('/accountProfile/delete/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const profileDinosaurDelete = await dinoUser.findByIdAndDelete(id);
        if (!profileDinosaurDelete) {
            return res.status(404).json({message: "User not found"})
        }
        res.status(200).json({message: "User Deleted successfully!"})
    } catch (error) {
        res.status(500).json({message: error.message})
    }
});

// forum-based commands


mongoose.connect('mongodb+srv://chordUser:ypGHnG2lL2TH26so@cluster0.4fyqe.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')
.then(() => { 
    console.log('Connected!') 
    app.listen(3000, () => {
        console.log('Server is running on port 3000')
    })
});
